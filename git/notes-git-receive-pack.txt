
An experience where I push from a repo to another one through pipes.
Using:
- git-receive-pack
- git push

mkdir /tmp/xgit
cd /tmp/xgit
mkfifo fifo1 fifo2

git init --bare repo_x
git clone repo_x repo_x.clone
cd repo_x.clone
echo 123 > foo
git add foo
git commit -m "file foo"

# Now use 2 parallel terminals:

# in terminal 1:
cd /tmp/xgit
git-receive-pack repo_x < fifo1 > fifo2

# In terminal 2:
cd /tmp/xgit
cd repo_x.clone
exec 7>../fifo1
exec 6<../fifo2
git push fd::6,7 master
	Counting objects: 3, done.
	Writing objects: 100% (3/3), 207 bytes | 0 bytes/s, done.
	Total 3 (delta 0), reused 0 (delta 0)
	To fd::6,7
 	* [new branch]      master -> master

# Result: the commit has been pushed to the initial repo_x


-- same test when the origin has commits that the clone has not --
(push with option -f)

cd /tmp/xgit
cd repo_x.clone
git push fd::6,7 master -f
    Counting objects: 3, done.
    Writing objects: 100% (3/3), 204 bytes | 0 bytes/s, done.
    Total 3 (delta 0), reused 0 (delta 0)
    To fd::6,7
     + 1c08620...007a673 master -> master (forced update)

=> conclusion: git-receive-pack does not prevent forced pushing

-- receive.denyNonFastForwards
cd /tmp/xgit
cd repo_x
git config receive.denyNonFastForwards true

cd /tmp/xgit/repo_x.clone
git push fd::6,7 master
    To fd::6,7
     ! [rejected]        master -> master (fetch first)
    error: failed to push some refs to 'fd::6,7'
    hint: Updates were rejected because the remote contains work that you do
    hint: not have locally. This is usually caused by another repository pushing
    hint: to the same ref. You may want to first integrate the remote changes
    hint: (e.g., 'git pull ...') before pushing again.
    hint: See the 'Note about fast-forwards' in 'git push --help' for details.

=> conclusion: git-receive-pack prevents forced pushing if receive.denyNonFastForwards=true


